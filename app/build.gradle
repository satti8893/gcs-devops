plugins {
    id 'com.android.application'
    id 'jacoco'
    id "org.sonarqube" version "3.3"
    id 'com.google.gms.google-services'
}

jacoco {
    toolVersion = '0.8.7'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.ga_gcs.logintest"
        minSdk 22
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.ga_gcs.logintest.MockRunnerTest"
    }

    buildTypes {
        debug {
            testCoverageEnabled true // Required for Instrumentation testing
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true // To include Robolectric tests in the Jacoco report
                jacoco.excludes = ['jdk.internal.*'] // Allows it to run on Java 11
            }
        }
        lintOptions {
            // Turns off checks for the issue IDs you specify.
            disable 'TypographyFractions','TypographyQuotes'
            // Turns on checks for the issue IDs you specify. These checks are in
            // addition to the default lint checks.
            enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
            // To enable checks for only a subset of issue IDs and ignore all others,
            // list the issue IDs with the 'check' property instead. This property overrides
            // any issue IDs you enable or disable using the properties above.
            checkOnly 'NewApi', 'InlinedApi'
            // If set to true, turns off analysis progress reporting by lint.
            quiet true
            // if set to true (default), stops the build if errors are found.
            abortOnError true
            // if true, only report errors.
            ignoreWarnings true
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//def fileFilter = ['**/databinding/**/*.*',
//                  '**/android/databinding/*Binding.*',
//                  '**/BR.*',
//                  '**/R.*',
//                  '**/R$*.*',
//                  '**/BuildConfig.*',
//                  '**/Manifest*.*',
//                  '**/*_MembersInjector.*',
//                  '**/Dagger*Component.*',
//                  '**/Dagger*Component$Builder.*',
//                  '**/*Module_*Factory.*',
//                  '**/*Fragment*.*',
//                  '**/*Activity*.*',
//                  '**/*Adapter*.*',
//                  '**/*ViewPager*.*',
//                  '**/*ViewHolder*.*',
//                  '**/*Module*.*']
def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "Reporting"

    description = "Generate Jacoco Unit coverage reports"

    reports {
        xml.enabled true
        html.enabled true
    }

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
//    additionalSourceDirs.setFrom(files([
//            "${buildDir}/generated/source/buildConfig/debug",
//            "${buildDir}/generated/source/r/debug"
//    ]))
    executionData.setFrom(fileTree(dir: "$project.buildDir", includes: [
            '**/*.exec'
    ]))
    // Always regenerate report
    outputs.upToDateWhen { false }
}

task jacocoUITestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {

    group = "Reporting"

    description = "Generate Jacoco UI coverage reports"

    reports {
        xml.enabled true
        html.enabled true
    }

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    additionalSourceDirs.setFrom(files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ]))
    executionData.setFrom(fileTree(dir: "$project.buildDir", includes: [
            '**/*.ec',
    ]))
}

sonarqube {
    properties {
        property "sonar.projectKey", "satti8893_gcs-devops"
        property "sonar.organization", "satti8893"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "gcs-devops"
        property "sonar.language", "java"

        property "sonar.java.binaries", "build/intermediates/javac/debug/classes"
        property "sonar.java.test.binaries", "build/intermediates/javac/debugUnitTest/classes,build/intermediates/javac/debugAndroidTest/classes"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", fileFilter

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/androidTest/java"
        property "sonar.java.tests", "src/test/java,src/androidTest/java"

        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"

    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.4.0"

    /*  Google  */
    implementation 'com.google.android.gms:play-services-basement:17.6.0'
    implementation 'com.google.android.gms:play-services-base:17.6.0'

    /*  Retrofit    */
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'

    /*  Firebase */
    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    /*  Unit Testing    */
    testImplementation 'org.robolectric:robolectric:4.7-alpha-2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'

    /*  Instrumentation Testing     */
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation "org.mockito:mockito-android:4.0.0"
    implementation("com.squareup.okhttp3:mockwebserver:4.9.2")
}


task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            '**/*.exec', '**/*.ec'
    ]))
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
}