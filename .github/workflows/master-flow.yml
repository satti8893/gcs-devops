name: Android Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  unit_tests:
    name: Android Unit Testing
    runs-on: ubuntu-latest
    steps:
      ## Checkout our repository ###
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      ## Set up our JDK environment
      - uses: actions/setup-java@v2.3.1
        with:
          java-version: 11
          distribution: 'adopt'

      #      ## Setup Gradle
      #      - name: Gradle
      #        uses: gradle/gradle-build-action@v2
      #        with:
      #          gradle-version: current
      #          wrapper-cache-enabled: true
      #          dependencies-cache-enabled: true
      #          configuration-cache-enabled: true

      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - run: chmod +x ./gradlew

      #      ## Build Application
      #      - name: Build Application
      #        run: ./gradlew assembleDebug

      ## Lint Checking
      #      - name: Lint Checking
      #        run: ./gradlew lint

      ## Unit Testing
      - name: Unit Testing
        run: ./gradlew jacocoTestReport

      ## Sonar Cloud Caching
      - name: Cache SonarCloud packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube -Dsonar.qualitygate.wait=true --info

#      - name: Create report-task-https.txt with changed urls
#        run: sed -i s/http\:/https\:/g build/sonar/report-task.txt
#
#      - name: SonarQube Quality Gate check
#        uses: sonarsource/sonarqube-quality-gate-action@master
#        # Force to fail step after specific time
#        timeout-minutes: 3
#        with:
#          scanMetadataReportFile: build/sonar/report-task.txt
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Uploading test reports artifacts
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-report
          path: |
            ./**/build/reports/
            ./**/build/test-results/

#  sign_release_apk:
#    name: Generate Signed APK
#    runs-on: ubuntu-latest
#    steps:
#      ## Checkout our repository ###
#      - uses: actions/checkout@v2.4.0
#
#      ## Set up our JDK environment
#      - uses: actions/setup-java@v2.3.1
#        with:
#          java-version: 11
#          distribution: 'adopt'
#
#      - uses: actions/cache@v2.1.6
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - run: bash ./gradlew assembleRelease
#
#      - uses: r0adkll/sign-android-release@v1
#        id: sign_app
#        with:
#          releaseDirectory: app/build/outputs/apk/release
#          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
#          alias: ${{ secrets.ALIAS }}
#          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#          keyPassword: ${{ secrets.KEY_PASSWORD }}
#
#      - uses: actions/upload-artifact@v2
#        with:
#          name: release.apk
#          path: ${{steps.sign_app.outputs.signedReleaseFile}}
#
#      - uses: actions/upload-artifact@master
#        with:
#          name: mapping.txt
#          path: app/build/outputs/mapping/release/mapping.txt
#
#  deploy-play-store:
#    needs: [ sign_release_apk ]
#    runs-on: ubuntu-latest
#    steps:
#      # 1
#      - uses: actions/download-artifact@master
#        with:
#          name: release.apk
#      - uses: actions/download-artifact@master
#        with:
#          name: mapping.txt
#      # 2
#      - name: Publish to Play Store internal test track
#        uses: r0adkll/upload-google-play@v1
#        with:
#          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
#          # 3
#          packageName: com.ga.ga_app
#          releaseFiles: app-release-unsigned-signed.apk
#          track: internal
#          userFraction: 0.50
#          mappingFile: mapping.txt